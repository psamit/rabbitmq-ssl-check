# ## TLS listeners are configured in the same fashion as TCP listeners,
# ## including the option to control the choice of interface.
# ##

# ## TLS configuration.
# ##
# ## Related doc guide: https://rabbitmq.com/ssl.html.
# ##

# listeners.ssl.default                   = 5671
# ssl_options.cacertfile                  = /etc/rabbitmq/cert/ca_certificate.pem
# ssl_options.certfile                    = /etc/rabbitmq/cert/server_certificate.pem
# ssl_options.keyfile                     = /etc/rabbitmq/cert/server_key.pem
# ssl_options.verify                      = verify_peer
# ssl_options.fail_if_no_peer_cert        = false

# ssl_options.versions.2 = tlsv1.2
# ssl_options.client_renegotiation = false
# ssl_options.secure_renegotiate   = true



listeners.ssl.default = 5671
# Related doc guide: https://rabbitmq.com/access-control.html.



# TLS configuration.
#
# Related doc guide: https://rabbitmq.com/ssl.html.
#
listeners.ssl.1                  = 5671

ssl_options.verify               = verify_peer
ssl_options.fail_if_no_peer_cert = false
ssl_options.cacertfile           = /etc/rabbitmq/cert/ca_certificate.pem
ssl_options.certfile             = /etc/rabbitmq/cert/server_certificate.pem
ssl_options.keyfile              = /etc/rabbitmq/cert/server_key.pem

ssl_options.honor_cipher_order   = true
ssl_options.honor_ecc_order      = true

# These are highly recommended for TLSv1.2 but cannot be used
# with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.
ssl_options.client_renegotiation = false
ssl_options.secure_renegotiate   = true


# Enables TLSv1.2 for best compatibility
ssl_options.versions.2 = tlsv1.2

# The example below uses TLSv1.2 cipher suites only

ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384
ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384
ssl_options.ciphers.3  = ECDHE-ECDSA-AES256-SHA384
ssl_options.ciphers.4  = ECDHE-RSA-AES256-SHA384
ssl_options.ciphers.5  = ECDH-ECDSA-AES256-GCM-SHA384
ssl_options.ciphers.6  = ECDH-RSA-AES256-GCM-SHA384
ssl_options.ciphers.7  = ECDH-ECDSA-AES256-SHA384
ssl_options.ciphers.8  = ECDH-RSA-AES256-SHA384
ssl_options.ciphers.9  = DHE-RSA-AES256-GCM-SHA384
ssl_options.ciphers.10 = DHE-DSS-AES256-GCM-SHA384
ssl_options.ciphers.11 = DHE-RSA-AES256-SHA256
ssl_options.ciphers.12 = DHE-DSS-AES256-SHA256
ssl_options.ciphers.13 = ECDHE-ECDSA-AES128-GCM-SHA256
ssl_options.ciphers.14 = ECDHE-RSA-AES128-GCM-SHA256
ssl_options.ciphers.15 = ECDHE-ECDSA-AES128-SHA256
ssl_options.ciphers.16 = ECDHE-RSA-AES128-SHA256
ssl_options.ciphers.17 = ECDH-ECDSA-AES128-GCM-SHA256
ssl_options.ciphers.18 = ECDH-RSA-AES128-GCM-SHA256
ssl_options.ciphers.19 = ECDH-ECDSA-AES128-SHA256
ssl_options.ciphers.20 = ECDH-RSA-AES128-SHA256
ssl_options.ciphers.21 = DHE-RSA-AES128-GCM-SHA256
ssl_options.ciphers.22 = DHE-DSS-AES128-GCM-SHA256
ssl_options.ciphers.23 = DHE-RSA-AES128-SHA256
ssl_options.ciphers.24 = DHE-DSS-AES128-SHA256
ssl_options.ciphers.25 = ECDHE-ECDSA-AES256-SHA
ssl_options.ciphers.26 = ECDHE-RSA-AES256-SHA
ssl_options.ciphers.27 = DHE-RSA-AES256-SHA
ssl_options.ciphers.28 = DHE-DSS-AES256-SHA
ssl_options.ciphers.29 = ECDH-ECDSA-AES256-SHA
ssl_options.ciphers.30 = ECDH-RSA-AES256-SHA
ssl_options.ciphers.31 = ECDHE-ECDSA-AES128-SHA
ssl_options.ciphers.32 = ECDHE-RSA-AES128-SHA
ssl_options.ciphers.33 = DHE-RSA-AES128-SHA
ssl_options.ciphers.34 = DHE-DSS-AES128-SHA
ssl_options.ciphers.35 = ECDH-ECDSA-AES128-SHA
ssl_options.ciphers.36 = ECDH-RSA-AES128-SHA

ssl_options.bypass_pem_cache = true


# The rabbitmq_auth_backend_ldap plugin allows the broker to
# perform authentication and authorisation by deferring to an
# external LDAP server.
#
# Relevant doc guides:
#
# * https://rabbitmq.com/ldap.html
# * https://rabbitmq.com/access-control.html
#
# uses LDAP for both authentication and authorisation
auth_backends.1 = rabbit_auth_backend_ldap

# uses HTTP service for both authentication and
# authorisation
auth_backends.1 = rabbit_auth_backend_http

# uses two backends in a chain: HTTP first, then internal
auth_backends.1   = rabbit_auth_backend_http
auth_backends.2   = rabbit_auth_backend_internal

# Authentication
# The built-in mechanisms are 'PLAIN',
# 'AMQPLAIN', and 'EXTERNAL' Additional mechanisms can be added via
# plugins.
#
# Related doc guide: https://rabbitmq.com/authentication.html.
#
auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = AMQPLAIN

# The rabbitmq-auth-mechanism-ssl plugin makes it possible to
# authenticate a user based on the client's x509 (TLS) certificate.
# Related doc guide: https://rabbitmq.com/authentication.html.
#
# To use auth-mechanism-ssl, the EXTERNAL mechanism should
# be enabled:
#
auth_mechanisms.1 = PLAIN
auth_mechanisms.2 = AMQPLAIN
auth_mechanisms.3 = EXTERNAL

# To force x509 certificate-based authentication on all clients,
# exclude all other mechanisms (note: this will disable password-based
# authentication even for the management UI!):
#
auth_mechanisms.1 = EXTERNAL

# This pertains to both the rabbitmq-auth-mechanism-ssl plugin and
# STOMP ssl_cert_login configurations. See the RabbitMQ STOMP plugin
# configuration section later in this file and the README in
# https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl for further
# details.
#
# To use the TLS cert's CN instead of its DN as the username
#
ssl_cert_login_from   = common_name

# TLS handshake timeout, in milliseconds.
#
ssl_handshake_timeout = 5000


#
# Default User / VHost
# ====================
#

# On first start RabbitMQ will create a vhost and a user. These
# config items control what gets created.
# Relevant doc guide: https://rabbitmq.com/access-control.html
#
default_vhost = /
default_user = amit
default_pass = amit

default_permissions.configure = .*
default_permissions.read = .*
default_permissions.write = .*

# Tags for default user
#
# For more details about tags, see the documentation for the
# Management Plugin at https://rabbitmq.com/management.html.
#
default_user_tags.administrator = true

# Define other tags like this:
default_user_tags.management = true
default_user_tags.custom_tag = true

